// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class itemBought extends ethereum.Event {
  get params(): itemBought__Params {
    return new itemBought__Params(this);
  }
}

export class itemBought__Params {
  _event: itemBought;

  constructor(event: itemBought) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get Price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class itemCanceled extends ethereum.Event {
  get params(): itemCanceled__Params {
    return new itemCanceled__Params(this);
  }
}

export class itemCanceled__Params {
  _event: itemCanceled;

  constructor(event: itemCanceled) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class itemListed extends ethereum.Event {
  get params(): itemListed__Params {
    return new itemListed__Params(this);
  }
}

export class itemListed__Params {
  _event: itemListed;

  constructor(event: itemListed) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class nftMarketPlace__getListingResultValue0Struct extends ethereum.Tuple {
  get price(): BigInt {
    return this[0].toBigInt();
  }

  get seller(): Address {
    return this[1].toAddress();
  }
}

export class nftMarketPlace extends ethereum.SmartContract {
  static bind(address: Address): nftMarketPlace {
    return new nftMarketPlace("nftMarketPlace", address);
  }

  getListing(
    nftAddress: Address,
    tokenID: BigInt
  ): nftMarketPlace__getListingResultValue0Struct {
    let result = super.call(
      "getListing",
      "getListing(address,uint256):((uint256,address))",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenID)
      ]
    );

    return changetype<nftMarketPlace__getListingResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getListing(
    nftAddress: Address,
    tokenID: BigInt
  ): ethereum.CallResult<nftMarketPlace__getListingResultValue0Struct> {
    let result = super.tryCall(
      "getListing",
      "getListing(address,uint256):((uint256,address))",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenID)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<nftMarketPlace__getListingResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getProceed(seller: Address): BigInt {
    let result = super.call("getProceed", "getProceed(address):(uint256)", [
      ethereum.Value.fromAddress(seller)
    ]);

    return result[0].toBigInt();
  }

  try_getProceed(seller: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getProceed", "getProceed(address):(uint256)", [
      ethereum.Value.fromAddress(seller)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class BuyItemCall extends ethereum.Call {
  get inputs(): BuyItemCall__Inputs {
    return new BuyItemCall__Inputs(this);
  }

  get outputs(): BuyItemCall__Outputs {
    return new BuyItemCall__Outputs(this);
  }
}

export class BuyItemCall__Inputs {
  _call: BuyItemCall;

  constructor(call: BuyItemCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenID(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyItemCall__Outputs {
  _call: BuyItemCall;

  constructor(call: BuyItemCall) {
    this._call = call;
  }
}

export class CancelItemCall extends ethereum.Call {
  get inputs(): CancelItemCall__Inputs {
    return new CancelItemCall__Inputs(this);
  }

  get outputs(): CancelItemCall__Outputs {
    return new CancelItemCall__Outputs(this);
  }
}

export class CancelItemCall__Inputs {
  _call: CancelItemCall;

  constructor(call: CancelItemCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenID(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CancelItemCall__Outputs {
  _call: CancelItemCall;

  constructor(call: CancelItemCall) {
    this._call = call;
  }
}

export class ListItemCall extends ethereum.Call {
  get inputs(): ListItemCall__Inputs {
    return new ListItemCall__Inputs(this);
  }

  get outputs(): ListItemCall__Outputs {
    return new ListItemCall__Outputs(this);
  }
}

export class ListItemCall__Inputs {
  _call: ListItemCall;

  constructor(call: ListItemCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenID(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ListItemCall__Outputs {
  _call: ListItemCall;

  constructor(call: ListItemCall) {
    this._call = call;
  }
}

export class UpdateItemCall extends ethereum.Call {
  get inputs(): UpdateItemCall__Inputs {
    return new UpdateItemCall__Inputs(this);
  }

  get outputs(): UpdateItemCall__Outputs {
    return new UpdateItemCall__Outputs(this);
  }
}

export class UpdateItemCall__Inputs {
  _call: UpdateItemCall;

  constructor(call: UpdateItemCall) {
    this._call = call;
  }

  get nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenID(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get newPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateItemCall__Outputs {
  _call: UpdateItemCall;

  constructor(call: UpdateItemCall) {
    this._call = call;
  }
}

export class WithdrawProceedCall extends ethereum.Call {
  get inputs(): WithdrawProceedCall__Inputs {
    return new WithdrawProceedCall__Inputs(this);
  }

  get outputs(): WithdrawProceedCall__Outputs {
    return new WithdrawProceedCall__Outputs(this);
  }
}

export class WithdrawProceedCall__Inputs {
  _call: WithdrawProceedCall;

  constructor(call: WithdrawProceedCall) {
    this._call = call;
  }
}

export class WithdrawProceedCall__Outputs {
  _call: WithdrawProceedCall;

  constructor(call: WithdrawProceedCall) {
    this._call = call;
  }
}
